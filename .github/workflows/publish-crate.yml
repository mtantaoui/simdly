name: Publish to crates.io

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: false
        default: 'minor'
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: 'Dry run (test without publishing)'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.version_check.outputs.should_publish }}
      current_version: ${{ steps.version_check.outputs.current_version }}
      new_version: ${{ steps.version_check.outputs.new_version }}
      version_changed: ${{ steps.version_check.outputs.version_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-edit for version bumping
        run: cargo install cargo-edit

      - name: Get current version
        id: get_current_version
        run: |
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Check if version bump is needed
        id: version_check
        run: |
          CURRENT_VERSION="${{ steps.get_current_version.outputs.current_version }}"
          
          # Check if this is a manual workflow dispatch or automatic push
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BUMP_TYPE="${{ github.event.inputs.version_bump }}"
            echo "Manual workflow dispatch with bump type: $BUMP_TYPE"
            SHOULD_PUBLISH="true"
          else
            # Check commit messages for version bump indicators
            COMMIT_MSG=$(git log -1 --pretty=%B)
            echo "Latest commit message: $COMMIT_MSG"
            
            if echo "$COMMIT_MSG" | grep -i "\[major\]" > /dev/null; then
              BUMP_TYPE="major"
              SHOULD_PUBLISH="true"
              echo "Found [major] in commit message"
            elif echo "$COMMIT_MSG" | grep -i "\[minor\]" > /dev/null; then
              BUMP_TYPE="minor"
              SHOULD_PUBLISH="true"
              echo "Found [minor] in commit message"
            elif echo "$COMMIT_MSG" | grep -i "\[patch\]" > /dev/null; then
              BUMP_TYPE="patch"
              SHOULD_PUBLISH="true"
              echo "Found [patch] in commit message"
            elif echo "$COMMIT_MSG" | grep -i "\[no-publish\]" > /dev/null; then
              SHOULD_PUBLISH="false"
              echo "Found [no-publish] in commit message, skipping publication"
            else
              # Default to minor bump for main branch pushes
              BUMP_TYPE="minor"
              SHOULD_PUBLISH="true"
              echo "No version bump specified, defaulting to minor"
            fi
          fi
          
          echo "should_publish=$SHOULD_PUBLISH" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          if [ "$SHOULD_PUBLISH" = "true" ]; then
            # Perform version bump
            echo "Bumping version: $BUMP_TYPE"
            cargo set-version --bump $BUMP_TYPE
            NEW_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "New version: $NEW_VERSION"
            
            # Check if version actually changed
            if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]; then
              echo "version_changed=true" >> $GITHUB_OUTPUT
            else
              echo "version_changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

  build-and-test:
    needs: version-check
    if: needs.version-check.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Build with CPU feature detection
        run: |
          # Run the build script to detect CPU features
          cargo build --release

      - name: Run tests
        run: |
          # Test with detected CPU features
          cargo test --release
          
          # Also test with explicit AVX2 if available
          if grep -q avx2 /proc/cpuinfo; then
            echo "AVX2 detected, running AVX2-specific tests"
            RUSTFLAGS="-C target-feature=+avx2" cargo test --release --features avx2 || true
          fi

      - name: Build documentation
        run: |
          # Build docs with all features enabled
          RUSTDOCFLAGS="--cfg docsrs" cargo doc --all-features --no-deps

  publish:
    needs: [version-check, build-and-test]
    if: needs.version-check.outputs.should_publish == 'true' && needs.version-check.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-edit
        run: cargo install cargo-edit

      - name: Update version in Cargo.toml
        run: |
          NEW_VERSION="${{ needs.version-check.outputs.new_version }}"
          cargo set-version $NEW_VERSION
          echo "Updated version to: $NEW_VERSION"

      - name: Commit version bump
        if: github.event.inputs.dry_run != 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Cargo.toml
          git commit -m "chore: bump version to ${{ needs.version-check.outputs.new_version }} [skip ci]" || exit 0
          git push origin main

      - name: Create Git tag
        if: github.event.inputs.dry_run != 'true'
        run: |
          NEW_VERSION="${{ needs.version-check.outputs.new_version }}"
          git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
          git push origin "v$NEW_VERSION"

      - name: Dry run publish
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "üîç DRY RUN MODE - Would publish version ${{ needs.version-check.outputs.new_version }}"
          cargo publish --dry-run --token ${{ secrets.CRATES_IO_TOKEN }}

      - name: Publish to crates.io
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "üöÄ Publishing version ${{ needs.version-check.outputs.new_version }} to crates.io"
          cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

      - name: Create GitHub Release
        if: github.event.inputs.dry_run != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.version-check.outputs.new_version }}
          release_name: Release v${{ needs.version-check.outputs.new_version }}
          body: |
            ## Changes in v${{ needs.version-check.outputs.new_version }}
            
            This release was automatically generated from the main branch.
            
            ### What's Changed
            - See commit history for detailed changes
            
            ### Installation
            ```bash
            cargo add simdly@${{ needs.version-check.outputs.new_version }}
            ```
            
            ### Documentation
            - [docs.rs](https://docs.rs/simdly/${{ needs.version-check.outputs.new_version }})
            - [crates.io](https://crates.io/crates/simdly)
          draft: false
          prerelease: false

  notify:
    needs: [version-check, publish]
    if: always() && needs.version-check.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Notification
        run: |
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "‚úÖ Successfully published simdly v${{ needs.version-check.outputs.new_version }} to crates.io"
          elif [ "${{ needs.version-check.outputs.version_changed }}" = "false" ]; then
            echo "‚ÑπÔ∏è  No version change detected, skipping publication"
          else
            echo "‚ùå Failed to publish to crates.io"
            exit 1
          fi