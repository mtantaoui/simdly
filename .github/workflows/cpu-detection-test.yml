name: CPU Feature Detection Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  # Test native compilation on different platforms
  test-native:
    name: Test Native Detection
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            toolchain: stable
            arch: x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            toolchain: nightly
            arch: x86_64
          
          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            toolchain: stable
            arch: aarch64
            use_cross: true
          
          # macOS x86_64
          - os: macos-13  # Intel runner
            target: x86_64-apple-darwin
            toolchain: stable
            arch: x86_64
          - os: macos-13
            target: x86_64-apple-darwin
            toolchain: nightly
            arch: x86_64
          
          # macOS ARM64
          - os: macos-latest  # M1 runner
            target: aarch64-apple-darwin
            toolchain: stable
            arch: aarch64
          - os: macos-latest
            target: aarch64-apple-darwin
            toolchain: nightly
            arch: aarch64
          
          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            toolchain: stable
            arch: x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            toolchain: nightly
            arch: x86_64
          
          # Windows ARM64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            toolchain: stable
            arch: aarch64
            use_cross: true

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.toolchain }}
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.use_cross
      run: |
        cargo install cross --git https://github.com/cross-rs/cross

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Create test project
      shell: bash
      run: |
        mkdir -p test-project/src
        echo 'fn main() { println!("Testing CPU detection"); }' > test-project/src/main.rs
        cat > test-project/Cargo.toml << 'EOF'
        [package]
        name = "cpu-test"
        version = "0.1.0"
        edition = "2021"
        build = "build.rs"
        EOF

    - name: Copy build script
      shell: bash
      run: |
        cp build.rs test-project/

    - name: Display system info (Linux)
      if: runner.os == 'Linux'
      run: |
        echo "=== CPU INFO ==="
        cat /proc/cpuinfo | grep -E "(model name|flags|Features)" | head -20
        echo "=== ARCHITECTURE ==="
        uname -m
        echo "=== RUST TARGET ==="
        rustc --version --verbose

    - name: Display system info (macOS)
      if: runner.os == 'macOS'
      run: |
        echo "=== CPU INFO ==="
        sysctl -n machdep.cpu.brand_string
        sysctl -a | grep -i "hw.optional" | head -20
        echo "=== ARCHITECTURE ==="
        uname -m
        echo "=== RUST TARGET ==="
        rustc --version --verbose

    - name: Display system info (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "=== CPU INFO ==="
        wmic cpu get name,architecture,description /format:table
        echo "=== POWERSHELL CPU INFO ==="
        powershell -Command "Get-WmiObject -Class Win32_Processor | Select-Object Name,Architecture,Description | Format-Table"
        echo "=== RUST TARGET ==="
        rustc --version --verbose

    - name: Test native build
      shell: bash
      if: '!matrix.use_cross'
      run: |
        cd test-project
        echo "Building for native target: ${{ matrix.target }}"
        cargo build --target ${{ matrix.target }} --verbose 2>&1 | tee build.log
        echo "=== BUILD OUTPUT ANALYSIS ==="
        grep -E "(cargo:warning|cargo:rustc)" build.log || echo "No detection warnings found"

    - name: Test cross-compilation build
      shell: bash
      if: matrix.use_cross
      run: |
        cd test-project
        echo "Cross-compiling for target: ${{ matrix.target }}"
        cross build --target ${{ matrix.target }} --verbose 2>&1 | tee build.log
        echo "=== BUILD OUTPUT ANALYSIS ==="
        grep -E "(cargo:warning|cargo:rustc)" build.log || echo "No detection warnings found"

    - name: Test nightly-specific features
      shell: bash
      if: matrix.toolchain == 'nightly'
      run: |
        cd test-project
        echo "Testing nightly-specific features"
        cargo build --target ${{ matrix.target }} --verbose 2>&1 | tee nightly-build.log
        echo "=== NIGHTLY BUILD ANALYSIS ==="
        grep -E "(avx512|rustc_channel.*nightly)" nightly-build.log || echo "No nightly-specific features found"

    - name: Verify feature detection output
      shell: bash
      run: |
        cd test-project
        echo "=== ANALYZING DETECTION RESULTS ==="
        
        # Check for expected detection patterns
        if grep -q "Using.*CPU feature detector" build.log; then
          echo "✅ CPU detector identified"
        else
          echo "❌ CPU detector not identified"
        fi
        
        if grep -q "CPU feature detection successful" build.log; then
          echo "✅ Detection successful"
        elif grep -q "CPU feature detection.*failed" build.log; then
          echo "⚠️  Detection failed (using fallback)"
        else
          echo "❓ Detection status unclear"
        fi
        
        # Check for enabled features
        if grep -q "Enabled CPU feature optimization" build.log; then
          echo "✅ CPU optimizations enabled"
          grep "Enabled CPU feature optimization" build.log
        else
          echo "ℹ️  Using fallback implementation"
        fi

    - name: Test error handling
      shell: bash
      run: |
        cd test-project
        echo "Testing error handling scenarios"
        
        # Test with invalid RUSTC environment
        echo "=== Testing invalid RUSTC ==="
        RUSTC=invalid_rustc cargo build --target ${{ matrix.target }} 2>&1 | tee error-test.log || true
        if grep -q "Failed to detect rustc channel" error-test.log; then
          echo "✅ RUSTC error handling works"
        else
          echo "❌ RUSTC error handling failed"
        fi

    - name: Upload build logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-logs-${{ matrix.os }}-${{ matrix.target }}-${{ matrix.toolchain }}
        path: |
          test-project/build.log
          test-project/nightly-build.log
          test-project/error-test.log

  # Test cross-compilation scenarios
  test-cross-compilation:
    name: Test Cross-Compilation
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Cross-compile to different architectures
          - target: aarch64-unknown-linux-gnu
            arch: ARM64
          - target: armv7-unknown-linux-gnueabihf
            arch: ARM32
          - target: x86_64-pc-windows-gnu
            arch: Windows
          - target: x86_64-apple-darwin
            arch: macOS
          - target: wasm32-unknown-unknown
            arch: WebAssembly

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      run: |
        cargo install cross --git https://github.com/cross-rs/cross

    - name: Create test project
      shell: bash
      run: |
        mkdir -p test-project/src
        echo 'fn main() { println!("Testing cross-compilation"); }' > test-project/src/main.rs
        cat > test-project/Cargo.toml << 'EOF'
        [package]
        name = "cpu-test-cross"
        version = "0.1.0"
        edition = "2021"
        build = "build.rs"
        EOF

    - name: Copy build script
      shell: bash
      run: |
        cp build.rs test-project/

    - name: Test cross-compilation
      shell: bash
      run: |
        cd test-project
        echo "Cross-compiling to ${{ matrix.target }} (${{ matrix.arch }})"
        cross build --target ${{ matrix.target }} --verbose 2>&1 | tee cross-build.log
        
        echo "=== CROSS-COMPILATION ANALYSIS ==="
        if grep -q "Cross-compiling detected" cross-build.log; then
          echo "✅ Cross-compilation properly detected"
        else
          echo "❌ Cross-compilation not detected"
        fi
        
        if grep -q "using fallback implementation" cross-build.log; then
          echo "✅ Fallback implementation used for cross-compilation"
        else
          echo "❌ Fallback not used"
        fi

    - name: Upload cross-compilation logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cross-build-logs-${{ matrix.target }}
        path: test-project/cross-build.log

  # Test detection robustness
  test-detection-robustness:
    name: Test Detection Robustness
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Create test project
      shell: bash
      run: |
        mkdir -p test-project/src
        echo 'fn main() { println!("Testing robustness"); }' > test-project/src/main.rs
        cat > test-project/Cargo.toml << 'EOF'
        [package]
        name = "cpu-test-robust"
        version = "0.1.0"
        edition = "2021"
        build = "build.rs"
        EOF

    - name: Copy build script
      shell: bash
      run: |
        cp build.rs test-project/

    - name: Test with restricted permissions (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        cd test-project
        echo "=== Testing with restricted access ==="
        
        # Try to build with restricted access to /proc (Linux only)
        if [ "$RUNNER_OS" = "Linux" ]; then
          sudo chmod 000 /proc/cpuinfo || true
          cargo build --verbose 2>&1 | tee restricted-build.log || true
          sudo chmod 644 /proc/cpuinfo || true
          
          if grep -q "Failed to read /proc/cpuinfo" restricted-build.log; then
            echo "✅ Graceful handling of restricted /proc/cpuinfo"
          fi
        fi

    - name: Test with missing commands
      shell: bash
      run: |
        cd test-project
        echo "=== Testing with missing system commands ==="
        
        # Test builds in environment where system commands might fail
        PATH="/usr/bin:/bin" cargo build --verbose 2>&1 | tee missing-cmd-build.log || true
        
        # Should still complete successfully with fallback
        if grep -q "using fallback implementation" missing-cmd-build.log; then
          echo "✅ Fallback works when system commands unavailable"
        fi

    - name: Test malformed system output simulation
      shell: bash
      run: |
        cd test-project
        echo "=== Testing error recovery ==="
        
        # Test should handle various error conditions gracefully
        cargo build --verbose 2>&1 | tee robust-build.log
        
        # Verify the build completed
        if [ $? -eq 0 ]; then
          echo "✅ Build completed successfully despite potential errors"
        else
          echo "❌ Build failed"
        fi
        
        # Check for proper error handling in logs
        if grep -q "cargo:warning.*failed" robust-build.log; then
          echo "✅ Error conditions properly reported"
        fi

    - name: Upload robustness test logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: robustness-logs-${{ matrix.os }}
        path: |
          test-project/restricted-build.log
          test-project/missing-cmd-build.log
          test-project/robust-build.log

  # Summary job
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-native, test-cross-compilation, test-detection-robustness]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate test summary
      shell: bash
      run: |
        echo "# CPU Feature Detection Test Summary" > summary.md
        echo "" >> summary.md
        echo "## Test Results" >> summary.md
        echo "" >> summary.md
        
        # Count successful builds
        total_logs=$(find . -name "*.log" | wc -l)
        echo "- Total test logs generated: $total_logs" >> summary.md
        
        # Look for common patterns across all logs
        success_count=$(grep -l "CPU feature detection successful" **/*.log 2>/dev/null | wc -l)
        fallback_count=$(grep -l "using fallback implementation" **/*.log 2>/dev/null | wc -l)
        error_count=$(grep -l "detection failed" **/*.log 2>/dev/null | wc -l)
        
        echo "- Successful detections: $success_count" >> summary.md
        echo "- Fallback implementations: $fallback_count" >> summary.md
        echo "- Detection errors: $error_count" >> summary.md
        echo "" >> summary.md
        
        echo "## Platform Coverage" >> summary.md
        echo "" >> summary.md
        
        # Check platform coverage
        linux_tests=$(find . -name "*ubuntu*" -type d | wc -l)
        windows_tests=$(find . -name "*windows*" -type d | wc -l)
        macos_tests=$(find . -name "*macos*" -type d | wc -l)
        
        echo "- Linux tests: $linux_tests" >> summary.md
        echo "- Windows tests: $windows_tests" >> summary.md
        echo "- macOS tests: $macos_tests" >> summary.md
        echo "" >> summary.md
        
        echo "## Key Findings" >> summary.md
        echo "" >> summary.md
        
        # Look for interesting patterns
        if grep -q "avx512" **/*.log 2>/dev/null; then
          echo "- ✅ AVX512 detection tested" >> summary.md
        fi
        
        if grep -q "Cross-compiling detected" **/*.log 2>/dev/null; then
          echo "- ✅ Cross-compilation handling verified" >> summary.md
        fi
        
        if grep -q "nightly" **/*.log 2>/dev/null; then
          echo "- ✅ Nightly toolchain support verified" >> summary.md
        fi
        
        echo "" >> summary.md
        echo "Full test artifacts available in the workflow run." >> summary.md
        
        cat summary.md

    - name: Upload summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: summary.md

  # Performance benchmark
  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Create benchmark project
      shell: bash
      run: |
        mkdir -p bench-project/src
        cat > bench-project/src/main.rs << 'EOF'
        use std::time::Instant;
        
        fn main() {
            let start = Instant::now();
            
            // Simulate some CPU-intensive work
            let mut sum = 0u64;
            for i in 0..1000000 {
                sum = sum.wrapping_add(i);
            }
            
            let duration = start.elapsed();
            println!("Computation took: {:?}", duration);
            println!("Result: {}", sum);
            
            // Print the configuration that was selected
            #[cfg(avx512)]
            println!("Built with AVX512 optimization");
            
            #[cfg(all(avx2, not(avx512)))]
            println!("Built with AVX2 optimization");
            
            #[cfg(all(sse, not(avx2), not(avx512)))]
            println!("Built with SSE optimization");
            
            #[cfg(all(neon, not(avx2), not(avx512), not(sse)))]
            println!("Built with NEON optimization");
            
            #[cfg(fallback)]
            println!("Built with fallback implementation");
        }
        EOF
        
        cat > bench-project/Cargo.toml << 'EOF'
        [package]
        name = "cpu-benchmark"
        version = "0.1.0"
        edition = "2021"
        build = "build.rs"
        
        [profile.release]
        opt-level = 3
        lto = true
        codegen-units = 1
        EOF

    - name: Copy build script
      shell: bash
      run: |
        cp build.rs bench-project/

    - name: Run benchmark
      shell: bash
      run: |
        cd bench-project
        echo "=== Building benchmark ==="
        cargo build --release --verbose 2>&1 | tee bench-build.log
        
        echo "=== Running benchmark ==="
        ./target/release/cpu-benchmark 2>&1 | tee bench-run.log
        
        echo "=== Benchmark Analysis ==="
        grep -E "(Built with|CPU feature optimization)" bench-build.log bench-run.log || echo "No optimization info found"

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: |
          bench-project/bench-build.log
          bench-project/bench-run.log