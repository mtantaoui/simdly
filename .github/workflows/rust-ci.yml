name: Rust CI and Documentation

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Since you can't use actions/checkout, you'll need an internal version or use git commands directly
      - name: Checkout code
        run: |
          git init
          git remote add origin https://github.com/${{ github.repository }}.git
          git fetch
          git checkout -f ${{ github.sha }}

      # Install Rust
      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustup default stable
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      # Run tests
      - name: Run tests
        run: |
          cargo build --verbose
          cargo test --verbose

      # Format code
      - name: Format code
        run: |
          rustup component add rustfmt
          cargo fmt --all --check

      - name: Ensure gh-pages Branch Exists
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git fetch origin gh-pages || git checkout --orphan gh-pages
          git reset --hard
          git clean -fd
          git commit --allow-empty -m "Initialize gh-pages branch" || true
          git push origin gh-pages || true

      # Deploy to GitHub Pages without using third-party actions
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./book/book
          publish_branch: gh-pages

  publish:
    name: Publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - run: cargo publish --token ${CRATE_TOKEN}
        env:
          CRATE_TOKEN: ${{ secrets.CRATE_TOKEN }}
