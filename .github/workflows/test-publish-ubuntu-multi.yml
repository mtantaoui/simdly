name: Test Publish Ubuntu Multi-Arch (Dry Run)

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-and-test-ubuntu-avx2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-avx2-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-avx2-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy with AVX2 features
        run: cargo clippy --all-targets -- -D warnings

      - name: Build with AVX2 features (native)
        run: |
          export RUSTFLAGS="-C target-cpu=haswell -C target-feature=+avx2"
          cargo build --release

      - name: Run tests with AVX2 (native)
        run: |
          export RUSTFLAGS="-C target-cpu=haswell -C target-feature=+avx2"
          cargo test --release

  build-and-test-ubuntu-aarch64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: aarch64-unknown-linux-gnu

      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-aarch64-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-aarch64-cargo-

      - name: Build with NEON features (cross-compile)
        run: |
          export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
          export RUSTFLAGS="-C target-cpu=cortex-a72 -C target-feature=+neon"
          cargo build --release --target aarch64-unknown-linux-gnu

      - name: Build documentation
        run: |
          RUSTDOCFLAGS="--cfg avx2 --cfg neon" cargo doc --no-deps

  dry-run-publish-ubuntu:
    needs: [build-and-test-ubuntu-avx2, build-and-test-ubuntu-aarch64]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Dry run publish
        run: |
          echo "üîç DRY RUN MODE - Testing crate publication for develop branch (Ubuntu Multi-Arch)"
          cargo publish --dry-run --token ${{ secrets.CRATE_TOKEN }}
