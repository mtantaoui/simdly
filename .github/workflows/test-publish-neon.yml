name: Test Publish AArch64 (Dry Run)

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-and-test-aarch64-apple:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: aarch64-apple-darwin

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-aarch64-apple-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-aarch64-apple-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy with NEON features
        run: cargo clippy --all-targets --target aarch64-apple-darwin -- -D warnings

      - name: Build with NEON features for macOS
        run: |
          export RUSTFLAGS="-C target-cpu=apple-a14 -C target-feature=+neon"
          cargo build --release --target aarch64-apple-darwin

      - name: Run tests with NEON for macOS
        run: |
          export RUSTFLAGS="-C target-cpu=apple-a14 -C target-feature=+neon"
          cargo test --release --target aarch64-apple-darwin

  build-and-test-aarch64-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: aarch64-unknown-linux-gnu

      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-aarch64-linux-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-aarch64-linux-cargo-

      - name: Build with NEON features for Linux ARM64
        run: |
          export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
          export RUSTFLAGS="-C target-feature=+neon"
          cargo build --release --target aarch64-unknown-linux-gnu

  build-and-test-aarch64-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: aarch64-pc-windows-msvc

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-aarch64-windows-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-aarch64-windows-cargo-

      - name: Build with NEON features for Windows ARM64
        run: |
          $env:RUSTFLAGS="-C target-feature=+neon"
          cargo build --release  --target aarch64-pc-windows-msvc

      - name: Build documentation with NEON
        run: |
          $env:RUSTDOCFLAGS="--cfg neon"
          cargo doc --no-deps

  dry-run-publish-aarch64:
    needs:
      [
        build-and-test-aarch64-apple,
        build-and-test-aarch64-linux,
        build-and-test-aarch64-windows,
      ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Dry run publish with AArch64 support
        run: |
          echo "üîç DRY RUN MODE - Testing crate publication for develop branch (AArch64)"
          cargo publish --dry-run --token ${{ secrets.CRATE_TOKEN }}
